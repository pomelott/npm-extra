#! /usr/bin/env node
const PkgCopy = require('../class/PkgCopy');
const pkg = new PkgCopy();
const {program} = require('commander');
const scptVersion = require('../scpt/version');
const {classifyCmd} = require('../lib/tools')
const version = scptVersion();

program.version(version)
program
  .command('init')
  .description('Initialize dependent files')
  .action(function () {
    pkg.init();
  })
program
  .command('install')
  .alias('i')
  .description('Install dependency & install all dependencies')
  .option('-D, --save-dev', 'Install devDependence dependencies')
  .option('--no-save', 'Do not update installation results in dependent files')
  .action(function (cmdObj) {
    const finalParam = classifyCmd(cmdObj);
    pkg.install(finalParam);
  })
program
  .command('uninstall')
  .alias('un')
  .description('Uninstall dependencies & uninstall all dependencies')
  .option('--no-save', 'Do not update the uninstall result in the dependent file')
  .action(function (cmdObj) {
    const finalParam = classifyCmd(cmdObj);
    pkg.uninstall(finalParam);
  })
program
  .command('config')
  .description('Configuration command')
  .option('-f, --filename', 'Modify the initialization file filename')
  .option('-b, --base-sys', 'Modify basic commands')
  .option('-l, --list', 'show config list')
  .action(function (cmdObj) {
    const finalParam = classifyCmd(cmdObj);
    pkg.config(finalParam);
})

program.parse(process.argv);